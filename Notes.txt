Practice 

Features
	= Must =
	Lessons defined by yaml files
	Show target & input text
	Detect & remember mistakes
	Show mistakes clearly
	Continue on error
	Show error count
	Handle plover input gracefully, especially backspaces
	Paragraph format with wrapped lines
	Dynamic UI scale
	Calculate and show WPM
	Show progress bar
	Transition to results screen once finished
	Display paper

	= Limitations =
	Plover input only
	non-ascii displayed as '?'

Details
	YAML file provides type of lesson (raw/words) and a list of words
		Raw lessons would look for specific keys to be pressed (such as 'SKWR').
		This is to train layout
		Word lessons would provide a list of words for the user to type
	Two spaces between words in lesson file indicates a newline
	
	Target words will be shown in the TextColor (light gray)
	Input words will be showin the AltTextColor (white)

	if the word does not match the target, it will display in red and be underlined

	Mistakes will be defined as when a backspace was needed to finish the word
		Specifically looking for * key, not plover backspaces which could be expected

	We need to keep the original inputText buffer intact. Do not remove spaces from plover input.
	If we did modify it, we can't guarantee that plover backspaces will work as intended anymore.
	So to handle that, and in order to realign after mistakes, word boundaries will be tracked. 
	Only the current word of the target and input will be compared at a time.

	string targetText;
	string inputText;

	List<int> targetWordBoundaries;
	List<int> inputWordBoundaries;

	Each word is really just a Span peeking into the string
	We can identify each of these using one or more space as the delimiter
	Make sure to put an extra delimiter in the back if it ends with a space, this is to properly handle suffix spaces

	Input:
	" test word with space in front"
	  1    6    11   16    22 25

	Target:
	"test word with space in front"
	 0    5    10   15    21 24

	Input:
	"test word with space in back "
	 0    5    10   15    21 24   29  

	Every time input changes we can recalculate words
	Not the most efficient but honestly input shouldn't be fast enough to cause any issue

	So what is the flow like?
	targetText = load(file)
	targetBounds = calcBounds(targetText)

	when(input):
		inputText += input
		inputBounds = calcBounds(inputText)

	for i = 0,max(#inputBounds, #targetBounds):
		iword = getInputWord(i)
		tword = getTargetWord(i)
		width = max(iword.length, tword.length)
		
		color = (white if (matched or last input word) else red)
		writeText(tWord)
		writeText(iWord)

		x += width

	Anytime a * key on its own is detected, the current word (both target & input) will be tracked
	
	Trivial case
	Target:
		taller | TAUL/*ER
	Input:
		" tall"    | TAUL  |
		" talling" | -G    |
		" tall"    | *     | error input: "talling" vs "taller"
		" taller"  | *ER   |

	Target:
		falling | TPAUL/-G
	Input
		TPAUL/-B/*/-G
	    " fall"    | TPAUL | naive approach would give "be" and next target word as error
	    " fall be" | -B    | instead, detect that * brought you to the middle of the previous target word, not the end
	    " fall"    | *     | in that case, the previous word must not have been complete and the next word was added by mistake
	    " falling" | -G    | correct error input: "fall be" vs "falling"

	Target:
		falling | TPAUL/-G
	Input
		TPAUL/-G/-G/-B/*/*
		" fall"          | TPAUL
		" falling"       | -G
		" fallinging"    | -G
		" fallinging be" | -B
		" fallinging"    | *      Seems like logic should be, if * brings you back to a word that was not yet correct, then it counts as that word?
		" falling"       | *      but at some point next word should be counted too. If its more than 1 * to get to the previous word then both will count

	Target:
		falling farther | TPAUL/-G/TPAR/THER
	Input
		TPAUL/-B/TPAR/THER/*/*/*/-G/TPAR/THER
		" fall"            | TPAUL
		" fall be"         | -B
		" fall be far"     | TPAR
		" fall be farther" | THER              uh oh...
		" fall be far"     | *
		" fall be"         | *
		" fall"            | *
		" falling"         | -G
		" falling far"     | TPAR
		" falling farther" | THER

	"falling farther"
	"fall be farther"
	if we don't have a solid match yet, and the last word in the buffer
	 matches the next expected word, then we assume all but the last word in the buffer
	 was from attempts on the previous word.
	 We can attribute those there, and separate at that point.

	Target: "Falling is done blah blah blah"
	TPAUL/-G/S/TKOPB
	TPAUL/-G/STKOPB
	TPAULG/S/TKOPB
	TPAULG/STKOPB

	Input: TPAUL/-B/STKOPB
		"fall"
		"fall be"
		"fall be is done"

	if not matching
	loop through each word in the input buffer (skip first)
	compare to following word
	if matches, move to next word - in this case we count it as error!

	"fall" - not matching current word, no following word
	"fall be" - not matching current word, be does not match next word
	"fall be is done" - not matching current word
		be doesn't match next word, is DOES match next word
	Move onto next word
		word input = "fall be"
		remaining input = "is done"
		current target = "is"


	Total logic:
	when(string input):
		




	TEUTH/-G
	tithe
	tithing -- e gets erased

    === worried about this approach, we need accurate and up to date dictionary information ==
	We will need to understand it at the stroke level, not the text level
	For each stroke, check if there a valid translation containing the current stroke buffer
	If not, we move into an error state.
	We will only leave error state and move onto the next word when the next stroke matches the following word
	Edge case, we should detect when the user missed a stroke as well.

	Target:
		falling far | TPAUL/-G/TPAR
	Input:
		TPAUL/TPAR
		" fall"     | TPAUL
		" fall far" | TPAR     Enter error state, as we missed -G, but immediately resolve as we had the correct stroke for following word.

	Maybe there is no "error state" but rather we will only ever move to the next work on a valid stroke OR previous word complete
	This would undercount errors if the user had 2 legitimately invalid strokes in a row, 
	but should make sense to the user why it is not moving to the next word

	pseudo-code:
		when(stroke):
			if stroke == "*":
				stroke_buffer.pop()
				return

			stroke_buffer.push(stroke)
			if complete(stroke_buffer) and valid_next(stroke)
				advance_word()
			else if not valid(stroke_buffer) and valid_next(stroke_buffer):
				advance_word()
	
	Interestingly, its possible for a word to have multiple translations that overlap.
	
	farther has both:
	TPA*RT
	TPA*RT/*ER
	TPAR/THER

	even though the first two contain the same first stroke,
	following up with *ER is valid, even if it does not change the output
	given that, we should not move to the next word even if the word is complete.

	Its possible for text and strokes to get out of sync if plover's dictionary is not matching the one in memory
	Use strokes/in-memory dictionary as source of truth for now.
	Should probably come up with a better way of handling this

	When out of sync, display won't quite look correct
	Maybe we just throw an error and let the user know?

	How are we counting errors?
	Maybe for each target word, if an error is detected for it, we count it only once.
	If the user mistypes again on the same word it is not counted against them again.
	Notably if the user types a word correctly, but backspaces back into the word and retypes it WILL count as an error.
	probably fine -- I don't want that actually

	In order to handle wrapped lines

	y
	x = start
	firstWordLine = true
	maxX
	for i = 0,max(#inputBounds, #targetBounds):
		iword = getInputWord(i)
		tword = getTargetWord(i)
		width = max(iword.length, tword.length)
		nextX += width
		if nextX > maxX and not firstWordLine:
			nextLine()
			x = start

		drawWord(iWord, x, y)
		drawWord(tWord, x, y+10)

		firstWordLine = false

	-- Essentially check before printing if it will bring you too far, if so next line
	Technically this won't act like proper wrapped text, since we *should* split the word to fit within max width
	but for the purposes of this app, its not necessary to do so. We know the width of the words and can account for that in maxX

	Dynamic UI scale
		Settings menu - for this scene alone just load from settings file


	WPM calculation is average between
		WPM since lesson start
		WPM of the last x words (10?)
		WPM of the last y seconds (10?)


	Progress bar | rect width = (#inputBounds / #targetBounds) * DisplayWidth

	Once final word is written *correctly*, a new ResultScene is created and transitioned to, passing a results object
	Need to figure out what we are tracking for results and how

 

 if all are true, hard error:
 	backspace to middle of word
 	stroke
 	does not match previous input stroke
 	soft error = true
 	
NCRA: The National Court Reporters Association defines a “word” as 1.4 syllables. This is the measure used for official NCRA testing material.